function [descriptors] = sift_descriptor(im, interest_points)

% Change to gray
im = rgb2gray(im);
[height, width, ~] = size(im);

% Set values
octaves = 4; % Number of times we downsize our image
intervals = 5; % Number of Gaussian blurs we take at each image size
images = zeros(height, width, intervals, octaves);
gaussians = zeros(height, width, intervals, octaves);
sigmaVal = 0.5;

% Create the first level
gaussians(:,:,:,1) = gaussian_stacks(im, 5, sigmaVal);

for i = 1:octaves
    % Reset sigma value
    sigma = sigmaVal;
    
    for j = 1:intervals
        % Find the difference in images
        % Used to approximate the gradient
        sigma = sigma*2^((j-1)/2);
        previousIm = gaussians(:,:,j,i);
        blurredIm = gaussian_blur(im, sigma);
        images(:,:,j,i) = blurredIm - previousIm;
        gaussians(:,:,j+1,i) = blurredIm;
    end
end

extrema = zeros(height-2, width-2);
%descriptors = zeros();
for i = 1:octaves
    for j = 2:intervals-1
        level = images(:,:,j,i); % Current level
        up = images(:,:,j+1,i);
        down = images(:,:,j-1,i);
  
        [sx,sy] = size(level);
        
        % Look for a local maxima
        % Check 8 surrounding neighbors
        % Check 9 surrounding neighbors of up and down
        local_maxima=(level(2:sx-1,2:sy-1) > level(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > level(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > level(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > level(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > level(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > level(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > level(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > level(3:sx,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > up(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > up(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > up(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > up(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > up(2:sx-1,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > up(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > up(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > up(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > up(3:sx,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > down(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > down(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > down(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > down(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > down(2:sx-1,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > down(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) > down(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) > down(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) > down(3:sx,3:sy));
               
        % Look for local minima
        local_minima=(level(2:sx-1,2:sy-1) < level(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < level(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < level(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < level(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < level(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < level(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < level(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < level(3:sx,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < up(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < up(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < up(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < up(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < up(2:sx-1,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < up(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < up(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < up(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < up(3:sx,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < down(1:sx-2,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < down(1:sx-2,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < down(1:sx-2,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < down(2:sx-1,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < down(2:sx-1,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < down(2:sx-1,3:sy)) & ...
                     (level(2:sx-1,2:sy-1) < down(3:sx,1:sy-2)) & ...
                     (level(2:sx-1,2:sy-1) < down(3:sx,2:sy-1)) & ...
                     (level(2:sx-1,2:sy-1) < down(3:sx,3:sy));
        extrema = local_maxima | local_minima | extrema;
        
    end
end

[row, col] = find(extrema);
descriptors = [row+1, col+1];

end

